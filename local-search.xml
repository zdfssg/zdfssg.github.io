<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/module/"/>
    <url>/2021/02/21/module/</url>
    
    <content type="html"><![CDATA[<h2 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h2><h4 id="一-模块加载机制"><a href="#一-模块加载机制" class="headerlink" title="一.模块加载机制"></a>一.模块加载机制</h4><p> 一、模块优先从缓存中进行加载 </p><p>   模块在第一次加载后会被缓存, 如果每次调用 require(‘foo’) 都解析到同一文件，则返回相同的对象,</p><p>  不会导致模块的代码被执行多次</p><p>二、缓存的作用</p><p>   不论是 node.js 内置的核心模块，用户自定义的模块还是第三方模块，都有对应的缓存策略，提升模块的</p><p>  加载效率</p><p>说明：文档地址（<a href="http://nodejs.cn/api/modules.html#modules_caching%EF%BC%89">http://nodejs.cn/api/modules.html#modules_caching）</a></p><h4 id="二-内置模块加载机制"><a href="#二-内置模块加载机制" class="headerlink" title="二.内置模块加载机制"></a>二.内置模块加载机制</h4><p>require() 总是会优先加载核心模块, 比如 require(‘http’) 始终返回内置的 HTTP 模块，即使有同名文件</p><h4 id="三-自定义模块加载机制"><a href="#三-自定义模块加载机制" class="headerlink" title="三.自定义模块加载机制"></a>三.自定义模块加载机制</h4><p> 一、自定义模块的加载机制 </p><p>   使用 require() 方法去加载自定义模块，必须指定 ‘/‘、 ‘./‘ 或 ‘../‘ 开头的路径，如果没有这个</p><p>  路径标识，node 会默认把它当作是一个核心模块或来自 node_modules 目录下的第三方模块</p><p>二、自定义文件模块</p><p>   如果按确切的文件名没有找到模块，则 Node.js 会尝试带上 .js、 .json 或 .node 拓展名再加载</p><p>三、自定义目录模块</p><p>   当传递一个目录标识符给 require () 方法时, 加载的顺序如下:</p><ol><li><p>在加载的目录下查找 package.json 的文件, 并寻找 main 属性作为 require 的入口</p></li><li><p>上述找不到, Node.js 将会试图加载目录下的 index.js 或 index.node 文件</p></li></ol><h4 id="四-第三方模块加载机制"><a href="#四-第三方模块加载机制" class="headerlink" title="四.第三方模块加载机制"></a>四.第三方模块加载机制</h4><p> 如果传递给 require() 的模块标识符不是一个核心模块，也没有以 ‘/‘ 、 ‘../‘ 或 ‘./‘ 开头，</p><p>  那么 Node.js 会从当前模块的父目录开始，尝试从它的 /node_modules 目录里加载模块。如果还是没有找到，</p><p>  则移动到再上一层父目录，直到文件系统的根目录。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/02/21/npm/"/>
    <url>/2021/02/21/npm/</url>
    
    <content type="html"><![CDATA[<h2 id="npm命令"><a href="#npm命令" class="headerlink" title="npm命令"></a>npm命令</h2><h4 id="一-包管理命令"><a href="#一-包管理命令" class="headerlink" title="一.包管理命令"></a>一.包管理命令</h4><p> 1、下载一个指定的包 </p><p>   <code>npm i 包的具体名称</code> </p><p>2、查看一个指定包</p><p>   <code>npm view 包的具体名称</code></p><p>3、下载指定版本的包</p><p>   <code>npm i 包的具体名称@版本号</code></p><h4 id="二-快速创建包管理配置文件"><a href="#二-快速创建包管理配置文件" class="headerlink" title="二.快速创建包管理配置文件"></a>二.快速创建包管理配置文件</h4><p>在项目的根目录下执行 <code>npm init -y</code> 命令</p><h4 id="三-卸载指定的包"><a href="#三-卸载指定的包" class="headerlink" title="三.卸载指定的包"></a>三.卸载指定的包</h4><p><code>npm uninstall 包名称</code></p><h4 id="四-全局安装包"><a href="#四-全局安装包" class="headerlink" title="四.全局安装包"></a>四.全局安装包</h4><p><code>npm install -g 包名称@版本号</code></p><h4 id="五-发布包"><a href="#五-发布包" class="headerlink" title="五.发布包"></a>五.发布包</h4><p>1.在包的发布目录下执行登录命令</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> login<br></code></pre></td></tr></table></figure><ol start="2"><li><p>在包的发布目录下面执行命令</p><p><code>npm publish</code></p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ajax</title>
    <link href="/2021/02/04/ajax/"/>
    <url>/2021/02/04/ajax/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>能够知道和服务器相关的基本概念</li><li>能够知道客户端和服务器通信的过程</li><li>能够知道数据也是一种资源</li><li>能够说出什么是<code>Ajax</code>以及应用场景</li><li>能够使用<code>jQuery</code>中的<code>Ajax</code>函数请求数据</li><li>能够知道接口和接口文档的概念</li></ul><h1 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h1><h2 id="客户端与服务器（⭐⭐⭐）"><a href="#客户端与服务器（⭐⭐⭐）" class="headerlink" title="客户端与服务器（⭐⭐⭐）"></a>客户端与服务器（⭐⭐⭐）</h2><h3 id="上网的目的"><a href="#上网的目的" class="headerlink" title="上网的目的"></a>上网的目的</h3><p><img src="images/%E4%B8%8A%E7%BD%91%E7%9B%AE%E7%9A%84.png"></p><p>上网的<strong>本质目的：</strong>通过互联网的形式来 <strong>获取和消费资源</strong></p><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>上网过程中，负责 <strong>存放和对外提供资源</strong> 的电脑，叫做服务器</p><p><img src="images/%E6%9C%8D%E5%8A%A1%E5%99%A8.png"></p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>在上网过程中，负责 <strong>获取和消费资源</strong> 的电脑，叫做客户端</p><p><img src="images/%E5%AE%A2%E6%88%B7%E7%AB%AF.png"></p><h2 id="URL地址的概念-amp-组成"><a href="#URL地址的概念-amp-组成" class="headerlink" title="URL地址的概念&amp;组成"></a>URL地址的概念&amp;组成</h2><h3 id="URL的概念"><a href="#URL的概念" class="headerlink" title="URL的概念"></a>URL的概念</h3><p>URL（全称是 <code>UniformResourceLocator</code>） 中文叫 <strong>统一资源定位符</strong>，用于标识互联网上每个资源的唯一存放位置。浏览器只有通过URL地址，才能正确定位资源的存放位置，从而成功访问到对应的资源</p><h3 id="URL的组成"><a href="#URL的组成" class="headerlink" title="URL的组成"></a>URL的组成</h3><p>URL地址一般由三部分组成:</p><ul><li>客户端与服务器之间的 <strong>通信协议</strong></li><li>存有该资源的 <strong>服务器名称</strong></li><li>资源在服务器上 <strong>具体的存放位置</strong></li></ul><p><img src="images/URL%E7%BB%84%E6%88%90.png"></p><h2 id="客户端与服务器通讯过程（⭐⭐⭐）"><a href="#客户端与服务器通讯过程（⭐⭐⭐）" class="headerlink" title="客户端与服务器通讯过程（⭐⭐⭐）"></a>客户端与服务器通讯过程（⭐⭐⭐）</h2><p><img src="images/%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.png"></p><p><strong>注意：</strong></p><ul><li>客户端与服务器之间的通讯过程，分为： <strong>请求-处理-响应</strong> 三个步骤</li><li>网页中每一个资源，都是通过 <strong>请求-处理-响应</strong> 的方式从服务器获取回来的</li></ul><h2 id="基于浏览器工具分析通讯过程"><a href="#基于浏览器工具分析通讯过程" class="headerlink" title="基于浏览器工具分析通讯过程"></a>基于浏览器工具分析通讯过程</h2><p><img src="images/%E5%B7%A5%E5%85%B7%E6%9D%A5%E5%88%86%E6%9E%90%E9%80%9A%E8%AE%AF%E8%BF%87%E7%A8%8B.png"></p><p><strong>步骤：</strong></p><ul><li>打开<code>Chorme</code>浏览器</li><li><code>Ctrl + Shift + I（F12）</code> 打开 Chrome 的开发者工具</li><li>切换到 <code>Network</code> 面板</li><li>选中<code>Doc</code> 页签</li><li>刷新页面，分析客户端与服务器的通讯过程</li></ul><h2 id="服务器对外提供的资源"><a href="#服务器对外提供的资源" class="headerlink" title="服务器对外提供的资源"></a>服务器对外提供的资源</h2><h3 id="常见资源"><a href="#常见资源" class="headerlink" title="常见资源"></a>常见资源</h3><p><img src="images/%E5%AF%B9%E5%A4%96%E6%8F%90%E4%BE%9B%E7%9A%84%E8%B5%84%E6%BA%90.png"></p><h3 id="数据也是资源（⭐⭐⭐）"><a href="#数据也是资源（⭐⭐⭐）" class="headerlink" title="数据也是资源（⭐⭐⭐）"></a>数据也是资源（⭐⭐⭐）</h3><p><strong>网页中的数据，也是服务器对外提供的一种资源</strong>，例如股票数据，各行业排行榜等</p><h2 id="网页中如何请求数据"><a href="#网页中如何请求数据" class="headerlink" title="网页中如何请求数据"></a>网页中如何请求数据</h2><blockquote><p>数据，也是服务器对外提供的一种 资源，只要是资源，必然要通过 请求 - 处理 - 响应 的方式进行获取</p></blockquote><p><img src="images/%E5%A6%82%E4%BD%95%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png"></p><p>如果要在网页中请求服务器上的数据资源，需要用到 <code>XMLHttpRequest</code> 对象</p><p><code>XMLHttpRequest</code>（简称 <code>xhr</code>）是浏览器提供的<code>JS</code>成员，通过它，可以请求服务器上的数据资源</p><p>最简单的用法 <code>var xhrObj = new XMLHttpRequest()</code></p><h2 id="资源的请求方式（⭐⭐⭐）"><a href="#资源的请求方式（⭐⭐⭐）" class="headerlink" title="资源的请求方式（⭐⭐⭐）"></a>资源的请求方式（⭐⭐⭐）</h2><p>客户端请求服务器时，请求的方式 <strong>有很多种</strong>，最常见的两种请求方式分别是 <code>get</code> 和 <code>post</code> 请求</p><ul><li><p><code>get 请求</code>，通常用于 <strong>获取服务器资源</strong>（要资源）</p><p>例如：根据 <code>URL</code> 地址，从服务器获取 <code>HTML</code>文件、<code>css</code>文件、<code>js</code>文件、图片文件、数据资源等</p></li><li><p><code>post 请求</code>，通常用于 <strong>向服务器提交数据</strong>（送资源）</p><p>例如：登录时，向服务器 <strong>提交登录信息</strong>、注册时向服务器 <strong>提交注册信息</strong>、添加用户时向服务器 <strong>提交用户信息</strong>等各种 <strong>数据提交操作</strong></p></li></ul><h1 id="了解Ajax"><a href="#了解Ajax" class="headerlink" title="了解Ajax"></a>了解<code>Ajax</code></h1><h2 id="什么是Ajax（⭐⭐⭐）"><a href="#什么是Ajax（⭐⭐⭐）" class="headerlink" title="什么是Ajax（⭐⭐⭐）"></a>什么是<code>Ajax</code>（⭐⭐⭐）</h2><p><code>Ajax</code> 的全称是 <code>Asynchronous JavaScript And XML</code>（异步 <code>JavaScript</code> 和 <code>xml</code>）</p><p>通俗理解：在网页中利用 <code>XMLHttpRequest</code> 对象和服务器进行数据交互的方式，就是<code>Ajax</code></p><h2 id="为什么要学Ajax"><a href="#为什么要学Ajax" class="headerlink" title="为什么要学Ajax"></a>为什么要学<code>Ajax</code></h2><p>之前所学的技术，只能把网页做的更美观漂亮，或添加一些动画效果，但还是，<code>Ajax</code>能让我们轻松实现 <strong>网页</strong> 与 <strong>服务器</strong>之间的 <strong>数据交互</strong></p><p><img src="images/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AD%A6%E4%B9%A0ajax.png"></p><h2 id="Ajax应该用场景（⭐⭐⭐）"><a href="#Ajax应该用场景（⭐⭐⭐）" class="headerlink" title="Ajax应该用场景（⭐⭐⭐）"></a><code>Ajax</code>应该用场景（⭐⭐⭐）</h2><h4 id="场景一：用户名检测"><a href="#场景一：用户名检测" class="headerlink" title="场景一：用户名检测"></a>场景一：用户名检测</h4><p>注册用户时，通过 <code>ajax</code> 的形式，动态 <strong>检测用户名是否被占用</strong></p><p><img src="images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png"></p><h4 id="场景二：搜索提示"><a href="#场景二：搜索提示" class="headerlink" title="场景二：搜索提示"></a>场景二：搜索提示</h4><p>当输入搜索关键字时，通过 <code>ajax</code> 的形式，动态 <strong>加载搜索提示列表</strong></p><p><img src="images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-02.png"></p><h4 id="场景三：数据分页显示"><a href="#场景三：数据分页显示" class="headerlink" title="场景三：数据分页显示"></a>场景三：数据分页显示</h4><p>当点击页码值得时候，通过 <code>ajax</code> 的形式，<strong>根据页码值动态刷新表格的数据</strong></p><p><img src="images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-03.png"></p><h4 id="场景四：数据的增删改查"><a href="#场景四：数据的增删改查" class="headerlink" title="场景四：数据的增删改查"></a>场景四：数据的增删改查</h4><p>数据的添加、删除、修改、查询操作，都需要通过 <code>ajax</code> 的形式，来实现数据的交互<br><img src="images/ajax%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-04.png"></p><h1 id="jQuery中的Ajax"><a href="#jQuery中的Ajax" class="headerlink" title="jQuery中的Ajax"></a><code>jQuery</code>中的Ajax</h1><p>浏览器中提供的 <code>XMLHttpRequest</code> 用法比较复杂，所以 <code>jQuery</code> 对 <code>XMLHttpRequest</code> 进行了封装，提供了一系列Ajax相关的函数，极大地 <strong>降低了Ajax的使用难度</strong></p><p><code>jQuery</code>中发起 Ajax 请求最常用的三个方法如下：</p><ul><li><code>$.get()</code> get方式请求，用于获取数据</li><li><code>$.post()</code> post方式请求，用于提交数据</li><li><code>$.ajax()</code> 比较综合，既可以获取数据，又可以提交数据</li></ul><h2 id="get-函数介绍（⭐⭐）"><a href="#get-函数介绍（⭐⭐）" class="headerlink" title="$.get() 函数介绍（⭐⭐）"></a>$.get() 函数介绍（⭐⭐）</h2><p><code>jQuery</code> 中 <code>$.get()</code> 函数的功能单一，专门用来发起 <code>get</code> 请求，从而将服务器上的资源请求到客户端来进行使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.get(url,[data],[callback])<br></code></pre></td></tr></table></figure><p><img src="images/get%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.png"></p><h3 id="get-发起不带参数的请求"><a href="#get-发起不带参数的请求" class="headerlink" title="$.get()发起不带参数的请求"></a>$.get()发起不带参数的请求</h3><p>使用 $.get() 函数 发起不带参数的请求时，直接提供给 <strong>请求的 URL 地址</strong> 和 <strong>请求成功之后的回调函数</strong> 即可，示例代码如下</p><p><img src="images/get%E8%AF%B7%E6%B1%82%E4%B8%8D%E5%B8%A6%E5%8F%82%E6%95%B0.png"></p><h3 id="get-发起携带参数的请求"><a href="#get-发起携带参数的请求" class="headerlink" title="$.get()发起携带参数的请求"></a>$.get()发起携带参数的请求</h3><p>使用<code>$.get()</code> 发起携带参数的请求，那么携带的参数应该写在第二个参数的位置，示例代码如下：</p><p><img src="images/get%E8%AF%B7%E6%B1%82%E6%90%BA%E5%B8%A6%E5%8F%82%E6%95%B0.png"></p><h2 id="post-函数介绍（⭐⭐）"><a href="#post-函数介绍（⭐⭐）" class="headerlink" title="$.post() 函数介绍（⭐⭐）"></a>$.post() 函数介绍（⭐⭐）</h2><p><code>jQuery</code> 中 <code>$.post()</code> 函数的功能单一，专门用来发起<code>post</code>请求，从而向服务器提交数据</p><p><code>$.post()</code> 函数的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.post(url,[data],[callback])<br></code></pre></td></tr></table></figure><p>参数各自代表的含义如下：</p><p><img src="images/post%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0.png"></p><h3 id="post-向服务器提交数据"><a href="#post-向服务器提交数据" class="headerlink" title="$.post() 向服务器提交数据"></a>$.post() 向服务器提交数据</h3><p>使用 <code>$.post()</code> 向服务器提交数据的示例代码如下：</p><p><img src="images/post%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE.png"></p><h2 id="ajax-函数介绍（⭐⭐⭐）"><a href="#ajax-函数介绍（⭐⭐⭐）" class="headerlink" title="$.ajax() 函数介绍（⭐⭐⭐）"></a><code>$.ajax()</code> 函数介绍（⭐⭐⭐）</h2><p>相比于 <code>$.get()</code> 和 <code>$.post()</code> 函数，<code>jQuery</code> 中提供的 <code>$.ajax()</code> 函数，是一个功能比较综合的函数，它允许我们对 <code>Ajax</code> 请求进行更详细的配置。</p><p><code>$.ajax()</code> 函数的基本语法如下：</p><p><img src="images/ajax%E8%AF%AD%E6%B3%95%E5%8F%82%E6%95%B0.png"></p><h3 id="ajax-发起-get-请求"><a href="#ajax-发起-get-请求" class="headerlink" title="$.ajax() 发起 get 请求"></a><code>$.ajax()</code> 发起 get 请求</h3><p>使用 <code>$.ajax()</code> 发起 <code>GET</code> 请求时，只需要将 <code>type</code> 属性 的值设置为 ‘<code>GET</code>’ 即可：</p><p><img src="images/ajax%E5%8F%91%E8%B5%B7get%E8%AF%B7%E6%B1%82.png"></p><h3 id="ajax-发起-post-请求"><a href="#ajax-发起-post-请求" class="headerlink" title="$.ajax 发起 post 请求"></a><code>$.ajax</code> 发起 post 请求</h3><p>使用 <code>$.ajax()</code> 发起 <code>post</code>请求，只需要把 <code>type</code>属性的值 设置为 ‘<code>post</code>’ 即可</p><p><img src="images/ajax%E5%8F%91%E8%B5%B7post%E8%AF%B7%E6%B1%82.png"></p><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口的概念（⭐⭐⭐）"><a href="#接口的概念（⭐⭐⭐）" class="headerlink" title="接口的概念（⭐⭐⭐）"></a>接口的概念（⭐⭐⭐）</h2><p>使用 <code>Ajax</code> 请求数据时，被请求的 <code>URL</code> 地址，就叫做 数据接口（简称<strong>接口</strong>）。同时，每个接口必须有请求方式。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>www.liulongbin.top:<span class="hljs-number">3006</span><span class="hljs-regexp">/api/g</span>etbooks 获取图书列表的接口（get请求）<br>http:<span class="hljs-regexp">//</span>www.liulongbin.top:<span class="hljs-number">3006</span><span class="hljs-regexp">/api/</span>addbook  添加图书的接口（post请求）<br></code></pre></td></tr></table></figure><h2 id="接口的请求过程"><a href="#接口的请求过程" class="headerlink" title="接口的请求过程"></a>接口的请求过程</h2><h3 id="GET方式请求接口的过程"><a href="#GET方式请求接口的过程" class="headerlink" title="GET方式请求接口的过程"></a>GET方式请求接口的过程</h3><p><img src="images/get%E6%96%B9%E5%BC%8F%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E8%BF%87%E7%A8%8B.png"></p><h3 id="POST方式请求接口的过程"><a href="#POST方式请求接口的过程" class="headerlink" title="POST方式请求接口的过程"></a>POST方式请求接口的过程</h3><p><img src="images/post%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E8%BF%87%E7%A8%8B.png"></p><h2 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h2><h3 id="什么是接口测试工具"><a href="#什么是接口测试工具" class="headerlink" title="什么是接口测试工具"></a>什么是接口测试工具</h3><p>为了验证接口是否被正常被访问，我们常常需要使用接口测试工具，来对数据接口进行检测</p><p><strong>好处：</strong>接口测试工具能让我们在 <strong>不写任何代码</strong> 的情况下，对接口进行 <strong>调用</strong> 和 <strong>测试</strong></p><p>常用的就是：<a href="https://www.getpostman.com/downloads/">PostMan</a></p><p><img src="images/postMan.png"></p><h3 id="了解-Postman-界面结构"><a href="#了解-Postman-界面结构" class="headerlink" title="了解 Postman 界面结构"></a>了解 Postman 界面结构</h3><p><img src="images/Postman%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D.png"></p><h3 id="使用PostMan测试GET接口"><a href="#使用PostMan测试GET接口" class="headerlink" title="使用PostMan测试GET接口"></a>使用<code>PostMan</code>测试GET接口</h3><p><img src="images/Postman%E6%B5%8B%E8%AF%95get%E8%AF%B7%E6%B1%82.png"></p><h3 id="使用PostMan测试POST接口"><a href="#使用PostMan测试POST接口" class="headerlink" title="使用PostMan测试POST接口"></a>使用<code>PostMan</code>测试POST接口</h3><p><img src="images/Postman%E6%B5%8B%E8%AF%95post%E8%AF%B7%E6%B1%82.png"></p><h2 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h2><h3 id="什么是接口文档（⭐⭐⭐）"><a href="#什么是接口文档（⭐⭐⭐）" class="headerlink" title="什么是接口文档（⭐⭐⭐）"></a>什么是接口文档（⭐⭐⭐）</h3><p>接口文档，顾名思义就是 <strong>接口的说明文档</strong>，<strong>它是我们调用接口的依据</strong>。好的接口文档包含了对 <strong>接口URL</strong>，<strong>参数</strong> 以及 <strong>输出内容</strong> 的说明，我们参照接口文档就能方便的知道接口的作用，以及接口如何进行调用</p><h3 id="接口文档的组成部分"><a href="#接口文档的组成部分" class="headerlink" title="接口文档的组成部分"></a>接口文档的组成部分</h3><p>接口文档可以包含很多信息，也可以按需进行精简，不过，一个合格的接口文档，应该包含以下6项内容，从而为接口的调用提供依据：</p><ul><li><strong>接口名称：</strong>用来标识各个接口的简单说明，如 <strong>登录接口</strong>，<strong>获取图书列表接口</strong>等</li><li><strong>接口URL：</strong>接口的调用地址</li><li><strong>调用方式：</strong>接口的调用方式，如 <strong>GET</strong> 或者 <strong>POST</strong></li><li><strong>参数格式：</strong>接口需要传递的参数，每个参数必须包含 <strong>参数名称</strong>、<strong>参数类型</strong>、<strong>是否必选</strong>、<strong>参数说明</strong> 这4项内容</li><li><strong>响应格式：</strong>接口的返回值的详细描述，一般包含<strong>数据名称</strong>、<strong>数据类型</strong>、<strong>说明</strong>3项内容</li><li><strong>返回示例（可选）：</strong>通过对象的形式，列举服务器返回数据的结构</li></ul><h3 id="接口文档示例"><a href="#接口文档示例" class="headerlink" title="接口文档示例"></a>接口文档示例</h3><p><img src="images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%AF%B7%E6%B1%82%E7%A4%BA%E4%BE%8B.png"></p><p><img src="images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%93%8D%E5%BA%94%E7%A4%BA%E4%BE%8B.png"></p><p><img src="images/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%BF%94%E5%9B%9E%E7%A4%BA%E4%BE%8B.png"></p><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="图书管理"><a href="#图书管理" class="headerlink" title="图书管理"></a>图书管理</h2><h3 id="项目效果"><a href="#项目效果" class="headerlink" title="项目效果"></a>项目效果</h3><p><img src="images/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E6%95%88%E6%9E%9C%E5%9B%BE.png"></p><h3 id="UI界面搭建"><a href="#UI界面搭建" class="headerlink" title="UI界面搭建"></a><code>UI</code>界面搭建</h3><p><strong>需要使用到的库和插件</strong></p><ul><li>用到的 <code>css</code> 库 <code>bootstrap.css</code></li><li>用到的 <code>javascript</code> 库 <code>jquery.js</code></li><li>用到 <code>vs code</code> 插件 <code>Bootstrap 3 Snippets</code></li></ul><p><strong>搭建步骤</strong></p><ul><li>Panel面板搭建<ul><li>创建panel板 （快捷键：<code>bs3-panel:primary</code>）</li><li>在 <code>panel-body</code> 里面，创建3个对应的输入框 （快捷键：<code>bs3-input:addon:text</code>），对应修改标题</li><li>在 <code>panel-body</code> 最后面，创建 <code>button</code>按钮 （快捷键：<code>bs3-button:primary</code>）,修改内容</li></ul></li><li>图书的表格<ul><li>创建 table（快捷键：<code>bs3-table:bordered</code>）</li><li>在里面创建对应5个<code>td</code>，填写里面内容</li></ul></li></ul><h3 id="获取图书列表数据"><a href="#获取图书列表数据" class="headerlink" title="获取图书列表数据"></a>获取图书列表数据</h3><p><strong>步骤：</strong></p><ul><li>查阅资料中的接口文档，找到获取图书列表的接口</li><li>定义 script 标签，创建入口函数</li><li>利用 $.get() 方法，传入相应的<code>url</code>，和成功之后的回调函数</li><li>在回调函数中获取到请求成功的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取图书列表数据</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBookList</span>(<span class="hljs-params"></span>) </span>&#123;<br>   $.get(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>         <span class="hljs-built_in">console</span>.log(res)<br>   &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="渲染图书列表"><a href="#渲染图书列表" class="headerlink" title="渲染图书列表"></a>渲染图书列表</h3><p><strong>步骤：</strong></p><ul><li>根据返回状态码来判断是否成功请求到数据</li><li>创建数组，用来存放<strong>行</strong>数据（<code>rows</code>）</li><li>遍历服务器返回的数组，每遍历一次，利用数组（<code>rows</code>）去<code>push</code>  <code>&lt;tr&gt;&lt;/tr&gt;</code></li><li>每一行 <code>tr</code> 里面包含了5个<code>td</code></li><li>给每一个 <code>td</code> 设置对应内容即可</li><li>遍历循环完毕之后，找到内容容器，先清空当前内容（以免有重复数据），然后添加 <code>rows</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> rows = []<br>$.each(res.data, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i, item</span>) </span>&#123;<br>     rows.push(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + item.id + <span class="hljs-string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.bookname + <span class="hljs-string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.author + <span class="hljs-string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.publisher + <span class="hljs-string">&#x27;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;javascript:;&quot; class=&quot;del&quot; data-id=&quot;&#x27;</span> + item.id + <span class="hljs-string">&#x27;&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>)<br>&#125;)<br>$(<span class="hljs-string">&#x27;#tb&#x27;</span>).empty().append(rows.join(<span class="hljs-string">&#x27;&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="删除功能实现"><a href="#删除功能实现" class="headerlink" title="删除功能实现"></a>删除功能实现</h3><h4 id="删除链接绑定单击事件处理函数"><a href="#删除链接绑定单击事件处理函数" class="headerlink" title="删除链接绑定单击事件处理函数"></a>删除链接绑定单击事件处理函数</h4><ul><li>利用 <code>tbody</code> 容器，通过<strong>事件委派</strong>的方式，给动态创建的<code>a</code>标签绑定事件</li><li>删除图书需要通过<code>id</code>删除，所以我们需要得到对应的<code>id</code>，我们利用自定义属性的方式，传递过来相应的<code>id</code></li></ul><h4 id="删除功能实现-1"><a href="#删除功能实现-1" class="headerlink" title="删除功能实现"></a>删除功能实现</h4><ul><li>查阅<strong>删除</strong>的接口文档</li><li>在a标签点击事件处理函数里面利用<code>$.get()</code>方法，请求服务器，传入要删除的对应<code>id</code></li><li>删除成功之后，调用 <code>getBookList()</code> 刷新页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;tbody&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.del&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">var</span> id = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;data-id&#x27;</span>)<br>  $.get(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/delbook&#x27;</span>, &#123;<br>    id: id<br>  &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (res.status !== <span class="hljs-number">200</span>) <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;删除图书失败！&#x27;</span>)<br>    getBookList()<br>   &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="添加功能实现"><a href="#添加功能实现" class="headerlink" title="添加功能实现"></a>添加功能实现</h3><h4 id="添加按钮绑定点击事件"><a href="#添加按钮绑定点击事件" class="headerlink" title="添加按钮绑定点击事件"></a>添加按钮绑定点击事件</h4><ul><li>获取三个输入框的内容</li><li>判断三个输入框是否输入了内容，如果没有进行提示</li></ul><h4 id="实现图书添加功能"><a href="#实现图书添加功能" class="headerlink" title="实现图书添加功能"></a>实现图书添加功能</h4><ul><li>查阅接口文档</li><li>注意接口文档需要提交的参数名，我们需要保持一致</li><li>调用<code>$.post()</code> 方法，传入请求路径，然后组拼需要提交的参数</li><li>在成功回调里面判断返回值是否是201，如果是201代表成功，反之没有成功，进行提示</li><li>请求成功之后，调用<code>gettBookList()</code> 方法刷新页面，同时把输入框里面值清空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#btnAdd&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>     <span class="hljs-keyword">var</span> bookname = $(<span class="hljs-string">&#x27;#iptBookname&#x27;</span>).val().trim()<br>     <span class="hljs-keyword">var</span> author = $(<span class="hljs-string">&#x27;#iptAuthor&#x27;</span>).val().trim()<br>     <span class="hljs-keyword">var</span> publisher = $(<span class="hljs-string">&#x27;#iptPublisher&#x27;</span>).val().trim()<br>     <span class="hljs-keyword">if</span> (bookname.length &lt;= <span class="hljs-number">0</span> || author.length &lt;= <span class="hljs-number">0</span> || publisher.length &lt;= <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;请填写完整的图书信息！&#x27;</span>)<br>     &#125;<br><br>     $.post(<span class="hljs-string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, &#123;<br>         bookname: bookname,<br>         author: author,<br>         publisher: publisher<br>     &#125;, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;<br>         <span class="hljs-keyword">if</span> (res.status !== <span class="hljs-number">201</span>) <span class="hljs-keyword">return</span> alert(<span class="hljs-string">&#x27;添加图书失败！&#x27;</span>)<br>         getBookList()<br>         $(<span class="hljs-string">&#x27;#iptBookname&#x27;</span>).val(<span class="hljs-string">&#x27;&#x27;</span>)<br>         $(<span class="hljs-string">&#x27;#iptAuthor&#x27;</span>).val(<span class="hljs-string">&#x27;&#x27;</span>)<br>         $(<span class="hljs-string">&#x27;#iptPublisher&#x27;</span>).val(<span class="hljs-string">&#x27;&#x27;</span>)<br>     &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="聊天机器人"><a href="#聊天机器人" class="headerlink" title="聊天机器人"></a>聊天机器人</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="images/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%A1%88%E4%BE%8B%E6%95%88%E6%9E%9C.png"></p><h3 id="实现功能点"><a href="#实现功能点" class="headerlink" title="实现功能点"></a>实现功能点</h3><ul><li>梳理案例代码结构</li><li>将用户输入的内容渲染到聊天窗口</li><li>发起请求获取聊天消息</li><li>将机器人的聊天内容转为语音</li><li>通过 <audio> 播放语音</li><li>使用回车发送消息</li></ul><h3 id="梳理案例的代码结构"><a href="#梳理案例的代码结构" class="headerlink" title="梳理案例的代码结构"></a>梳理案例的代码结构</h3><ul><li><p><code>UI</code>结构梳理</p><p><img src="images/%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BAUI%E7%BB%93%E6%9E%84.png"></p></li><li><p>业务代码抽离</p></li><li><p><code>resetui()</code> 函数作用-让聊天框区域自动滚动到底部</p></li></ul><h3 id="将用户输入的内容渲染到聊天窗口"><a href="#将用户输入的内容渲染到聊天窗口" class="headerlink" title="将用户输入的内容渲染到聊天窗口"></a>将用户输入的内容渲染到聊天窗口</h3><ul><li>为发送按钮绑定点击事件</li><li>在点击事件函数里面判断一下用户输入内容是否为空，注意：如果为空，我们清除一下输入框内容</li><li>获取到对应的<code>ul</code>容器，调用 <code>append</code> 函数来追加 <code>li</code>，注意：追加<code>li</code>的类名叫做 <code>right_word</code></li><li>清除文本输入框的值</li><li>最后调用一下 <code>resetui()</code>，让聊天框区域自动滚动到底部</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 为发送按钮绑定鼠标点击事件</span><br>$(<span class="hljs-string">&#x27;#btnSend&#x27;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> text = $(<span class="hljs-string">&#x27;#ipt&#x27;</span>).val().trim()<br>    <span class="hljs-keyword">if</span> (text.length &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> $(<span class="hljs-string">&#x27;#ipt&#x27;</span>).val(<span class="hljs-string">&#x27;&#x27;</span>)<br>    &#125;<br>    <span class="hljs-comment">// 如果用户输入了聊天内容，则将聊天内容追加到页面上显示</span><br>    $(<span class="hljs-string">&#x27;#talk_list&#x27;</span>).append(<span class="hljs-string">&#x27;&lt;li class=&quot;right_word&quot;&gt;&lt;img src=&quot;img/person02.png&quot; /&gt; &lt;span&gt;&#x27;</span> + text + <span class="hljs-string">&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;</span>)<br>    $(<span class="hljs-string">&#x27;#ipt&#x27;</span>).val(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment">// 重置滚动条的位置</span><br>    resetui()<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="发起请求获取聊天信息"><a href="#发起请求获取聊天信息" class="headerlink" title="发起请求获取聊天信息"></a>发起请求获取聊天信息</h3><ul><li>定义一个函数 <code>getMsg()</code> 接收一个参数，参数就是用户发送的信息</li><li>利用 <code>$.ajax()</code> 发送一个 GET 方式请求，传入请求地址 <code>http://ajax.frontend.itheima.net:3006/api/robot</code></li><li>定义请求数据 <code>spoken：value</code></li><li>定义<code>success</code>成功的回调，在回调函数里面判断返回数据的 <code>message</code> 是否等于 <code>success</code></li><li>给容器动态添加返回的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 获取聊天机器人发送回来的消息</span><br> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getMsg</span>(<span class="hljs-params">text</span>) </span>&#123;<br>   $.ajax(&#123;<br>     method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>     url: <span class="hljs-string">&#x27;http://ajax.frontend.itheima.net:3006/api/robot&#x27;</span>,<br>     data: &#123;<br>       spoken: text<br>     &#125;,<br>     success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>       <span class="hljs-comment">// console.log(res)</span><br>       <span class="hljs-keyword">if</span> (res.message === <span class="hljs-string">&#x27;success&#x27;</span>) &#123;<br>         <span class="hljs-comment">// 接收聊天消息</span><br>         <span class="hljs-keyword">var</span> msg = res.data.info.text<br>         $(<span class="hljs-string">&#x27;#talk_list&#x27;</span>).append(<span class="hljs-string">&#x27;&lt;li class=&quot;left_word&quot;&gt;&lt;img src=&quot;img/person01.png&quot; /&gt; &lt;span&gt;&#x27;</span> + msg + <span class="hljs-string">&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;</span>)<br>         <span class="hljs-comment">// 重置滚动条的位置</span><br>         resetui()<br>       &#125;<br>     &#125;<br>   &#125;)<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="将机器人聊天内容转成语音"><a href="#将机器人聊天内容转成语音" class="headerlink" title="将机器人聊天内容转成语音"></a>将机器人聊天内容转成语音</h3><ul><li>封装函数 <code>getVoice()</code> 接收一个参数，机器人的聊天信息</li><li>利用 <code>$.ajax()</code> 发送一个 GET 方式请求，传入请求地址 <code>http://ajax.frontend.itheima.net:3006/api/synthesize</code></li><li>定义请求数据 <code>text：value</code></li><li>定义<code>success</code>成功的回调，判断返回的状态码是否是200，如果是代表成功</li><li>在页面上定义 <code>audio</code> 标签，设置隐藏，等数据返回之后，利用这个 <code>audio</code> 来进行播放。设置 <code>autoplay</code> 属性来进行自动播放</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 把文字转化为语音进行播放</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getVoice</span>(<span class="hljs-params">text</span>) </span>&#123;<br>    $.ajax(&#123;<br>      method: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>      url: <span class="hljs-string">&#x27;http://ajax.frontend.itheima.net:3006/api/synthesize&#x27;</span>,<br>      data: &#123;<br>        text: text<br>      &#125;,<br>      success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>        <span class="hljs-comment">// console.log(res)</span><br>        <span class="hljs-keyword">if</span> (res.status === <span class="hljs-number">200</span>) &#123;<br>          <span class="hljs-comment">// 播放语音</span><br>          $(<span class="hljs-string">&#x27;#voice&#x27;</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, res.voiceUrl)<br>        &#125;<br>      &#125;<br>    &#125;)<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="通过回车键发送消息"><a href="#通过回车键发送消息" class="headerlink" title="通过回车键发送消息"></a>通过回车键发送消息</h3><ul><li>给文本输入框注册 <code>keyup</code> 事件，按键弹起的事件监听</li><li>在事件函数里面，通过<code>keycode</code> 来获取对应的按键的 机器码</li><li>判断 <code>keycode</code> 是否等于 13（不需要去记忆，开发时候打印调试一下就行了），如果是，代表是回车键</li><li>如果是回车键，模拟用户点击：  <code>$(&#39;#btnSend&#39;).click()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 为文本框绑定 keyup 事件</span><br> $(<span class="hljs-string">&#x27;#ipt&#x27;</span>).on(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>   <span class="hljs-comment">// console.log(e.keyCode)</span><br>   <span class="hljs-keyword">if</span> (e.keyCode === <span class="hljs-number">13</span>) &#123;<br>     <span class="hljs-comment">// console.log(&#x27;用户弹起了回车键&#x27;)</span><br>     $(<span class="hljs-string">&#x27;#btnSend&#x27;</span>).click()<br>   &#125;<br> &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/28/hello-world/"/>
    <url>/2021/01/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
